# Local 개발 시 설정 = application.properties 

# Remote(원격)서비스 작동할 때 설정 파일 = application-prod.properties
# java -Dspring.profile.active=prod -jar sbb-0.0.1-SNAPSHOT.jar
#		application-prod.properties 파일이 설정 된다.
# profile 변수 prod 
#앞뒤로 공백 있으면 안됨 

# 각종 설정을 셋팅하는 파일
# JDBC 셋팅 , MyBatis Mapper
# 주석 

# 기본포트 : 8080 ( netstat -na|more)
server.port=9696

# DevTools  활성화
spring.devtools.livereload.enabled=true
spring.freemarker.cache=false

# H2 DataBase db 연결 
# 원격에서 H2 DataBase 를 접근할 수 있도록 허용해주는 것. 
spring.h2.console.settings.web-allow-others=true

spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
#공백 있으면 안됨..주소에..^^....
spring.datasource.url=jdbc:h2:~/local
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=1234

# JPA(JPA는 H2 DB와 연결되고, 변경사항만 업데이트 되도록 설정)
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update

# JPA 메소드를 사용할 경우 JPA가 SQL 쿼리를 자동으로 생성하여 DB에 저장.(Oracle, MySQL, MSSQL...)
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.show_sql=true

# Logging 설정
logging.logback.rollingpolicy.max-history=30
logging.logback.rollingpolicy.max-file-size=100MB
logging.file.name=logs/sbb.log
logging.logback.rollingpolicy.file-name-pattern=${LOG_FILE}.%d{yyyy-MM-dd}-%i.log
logging.pattern.dateformat=yyyy-MM-dd HH:mm:ss.SSS,Asia/Seoul

logging.level.root=info

#Loging 설정 레벨
#1. trace(1단계) : 아주 상세한 정보의 로그를 남깁니다.( debug보다 많은 정보를 남김)
#2. debug(2단계) : 디버깅을 목적으로 사용
#3. info(3단계) : 일반 정보를 출력할때 사용 		<======<<< 기본값 : default >>>>
#4. warn ( 4단계 ) : 경고 정보를 출력할 때 사용 (작은 문제) 
#5. error(5단계) : 오류 정보를 출력 할때 사용(큰문제)
#6. fatal(6단계) : 치명적인 오류를 출력할 때 사용 (kernal 에서 발생되는 문제)
#
#trace < debug < info < warn < error < fatal

# 오라클 접속
# 나중에 복붙하고 주석처리 하기 ㅇㅇ )0227

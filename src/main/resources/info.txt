
롬북 (lombok) - DTO : client 에서 자바의 객체(DTO) ==> DB Table 
		      DB Table ==> DTO  ==> Client View 
      - DTO 생성 : 
	1. DataBase 의 테이블의 컬럼명과 동일한 자료형, 변수 (private)
	=================================================
	2. 기본생성자 생성 
	3. getter(필드의 값을 가지고오는), setter(필드의 값을 셋팅) 생성
	4. toString 재정의 : 객체 자체를 프린트했을때 객체의 필드의 내용을 확인



https://projectlombok.org/download
1. 다운로드 
2. 이클립스 가 부팅 할때 (SpringToolSuite4.ini) 파일에 lombok 가 등록 되어야 작동됨 
	설치가 필요함 
	다운로드한 폴더로 이동후 아래 명령어 실행 
	java -jar lombok.jar 
===================================================
3. 라이브러리 추가 

===============================================




실습 : 
   - 새로운 프로잭트 생성후 서버 포트 변경 
   - @Controller 어너테이션 을 사용해서 @GetMapping ("/hello") 요청시 메소드 출력 @ResponseBody
   - Lombok의 어노테이션 사용. 
   		- @Getter, @Setter, @toString, @noArgContructor, @allArgContructor, 
   		- @RequredArgContructor 사용 
   - devTools 를 사용하여 수정시 자동 반영 

========================================================================
JPA 사용을 위한 환경 구성 
===============================================
JPA 사용을 위한 환경 구성
1. H2 DataBase : 테스트 환경에서 많이 사용 .==> Oracle (서비스 환경)
	- 라이브러리 추가 : Build.gradle
		runtimeOnly 'com.h2database:h2' // 실행시에만 작동 
	- db 연결 설정 : application.properties
		spring.h2.console.enabled=true
		spring.h2.console.path=/h2-console
		spring.datasource.url=jdbc:h2:~/local
		spring.datasource.driverClassName=org.h2.Driver
		spring.datasource.username=sa
		spring.datasource.password=
	-  H2 DataBase 파일을 생성 : ~ : 로그온한 계정의 홈 폴더(c:\uusers\hi)
		~/local.mv.db 	<== H2 데이터 베이스의 DataBase 파일 (git 에서 생성..)
		cd ~ 
		touch local.mv.db
		
	- H2 DataBase 접속 : 프로젝트 시작 크롬 url : http://localhost:9696/h2-console/

2. JPA 환경 설정

	- 의존성 라이브러리 추가 : build.gradle
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	- JPA 설정 : application.properties
		#JPA
		spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect : H2dialect 가 h2 database에 연결됨 
		spring.jpa.hibernate.ddl-auto=update    # 주의 : 운영환경에서는 none, validate
			# none : 엔티티(자바에서 DTO 객체. DTO 클래스이름 = 실제 DB의 테이블이름, DTO 필드이름 = DB의 컬럼명 ) 가 변경되더라도 데이터베이스를 변경하지 않도록 설정
			# update : 엔티티 변경된 부분만 실제 데이터베이스에 적용됨.
			# validate : 변경사항이 있는지 확인만 함
			# create : 스프링 부트가 작동될 때 DB의 테이블을 Drop하고 다시 생성함.
			# create-drop : create와 동일함. 스프링 부트 종료될 때 테이블 삭제.(drop)
3. 엔티티 클래스 작성 : @Entity 어노테이션이 붙은 자바 클래스 (DTO위에 )
	- 엔티티 : 데이터베이스 테이블과 매핑되는 자바클래스 (DTO의 클래스 이름이 테이블명과 매핑, 
			DTO 내부의 필드명이 테이블의 컬럼명과 매핑) 		
	
	
		-- Question.java 	: 부모
		-- Answer.java 		: 자식
		
※ JPA는 DB의 테이블의 컬럼이 수정되거나 생성되거나 삭제되는 일이 빈번하게 발생 시 유지보수를 아주 쉽게 할 수 있다.
	JPA 를 사용하지 않는 경우, DB의 테이블에서 수정 발생 시 DTO, DAO(insert, update, delete, get, getList 등 쿼리)를 다 수정해주어야 함.
	- 단점 : 테이블이 복잡한 조인으로 연결된 경우나, 복잡한 계산을 처리하는 환경에서는 적합하지 않다.
		(MyBatis : 유지보수도 쉽게 하고 , 복잡한 계산처리도 가능)
		
4. 레파지토리 (Repository) - DAO : 자바 클래스의 JPA 메소드를 사용하여 
		SQL의 CRUD( Insert, Update, Delete , Get)
	- JPA를 사용해서 DB를 CRUD 할려면 Repository 인터페이스를 생성해야 한다.
	- JPARepository를 상속해서 만들어야 한다.

=========
실습 0208 
sbb2 패키지에서 진행 .
H2 DataBase를 사용하고
JPA Entity 클래스 실습, JPA 메소드를 사용해서 CRUD, Save(), FindAll(),

아래 내용의 JPA Entity 클래스를 생성하세요
테이블명 : users
idx primary key, 자동증가 (1,1)
name varchar(100)
pass varchar(100)
email varchar(200)
regdate LocalDateTime
cnt int

임의의 값을 5개 insert
넣은 값을 regdate 컬럼을 기준으로 내림차순 desc 정렬
idx 3번의 name과 email주소를 수정
idx 4번의 값을 삭제 



